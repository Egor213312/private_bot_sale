from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import ADMIN_IDS
from database import get_all_users, get_user, get_subscription
from datetime import datetime
from aiogram.fsm.context import FSMContext

router = Router()

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
             InlineKeyboardButton(text="üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_activate_sub")],
        ]
    )
    await message.answer(
        "<b>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

@router.callback_query(F.data == "admin_stats")
async def cb_admin_stats(callback: CallbackQuery):
    users = await get_all_users()
    total = len(users)
    active = 0
    for u in users:
        sub = await get_subscription(u[0])
        if sub:
            end = datetime.strptime(sub[3], "%d.%m.%Y")
            if (end - datetime.now()).days > 0:
                active += 1
    await callback.message.answer(
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{active}</b>\n"
        f"‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{total - active}</b>\n\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def cb_admin_users(callback: CallbackQuery):
    users = await get_all_users()
    if not users:
        await callback.message.answer("‚ùóÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üë§ {u[2]} ({u[1]})", callback_data=f"admin_user_{u[1]}")] for u in users
        ]
    )
    await callback.message.answer("<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_info(callback: CallbackQuery):
    tg_id = int(callback.data.split("_")[-1])
    user = await get_user(tg_id)
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    sub = await get_subscription(user[0])
    sub_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    days_left = 0
    if sub:
        sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        end = datetime.strptime(sub[3], "%d.%m.%Y")
        days_left = (end - datetime.now()).days
        if days_left < 0:
            days_left = 0
    await callback.message.answer(
        f"<b>üóÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        f"<b>ID:</b> <code>{user[1]}</code>\n"
        f"<b>üë§ –ò–º—è:</b> {user[2]}\n"
        f"<b>üìß Email:</b> {user[4]}\n"
        f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {user[3]}\n\n"
        f"<b>üü¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {sub_status}\n"
        f"{'‚è≥ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ' + str(days_left) if sub else ''}"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def cb_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n<code>/send –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</code>")
    await callback.answer()

@router.message(Command("send"))
async def cmd_send_broadcast(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    text = message.text.partition(' ')[2].strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /send –í–∞—à —Ç–µ–∫—Å—Ç")
        return
    users = await get_all_users()
    sent = 0
    for u in users:
        try:
            await message.bot.send_message(u[1], text)
            sent += 1
        except Exception:
            pass
    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@router.callback_query(F.data == "admin_activate_sub")
async def cb_admin_activate_sub(callback: CallbackQuery):
    await callback.message.answer("üîë –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/activate_sub user_id months</code>\n\n–ü—Ä–∏–º–µ—Ä: /activate_sub 123456789 3")
    await callback.answer()

@router.message(Command("activate_sub"))
async def cmd_activate_sub(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_sub user_id months\n–ü—Ä–∏–º–µ—Ä: /activate_sub 123456789 3")
        return
    try:
        tg_id = int(args[1])
        months = int(args[2])
    except ValueError:
        await message.answer("user_id –∏ months –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    user = await get_user(tg_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    from database import deactivate_subscriptions, add_subscription
    from datetime import datetime, timedelta
    await deactivate_subscriptions(user[0])
    start = datetime.now()
    end = start + timedelta(days=30*months)
    await add_subscription(user[0], start.strftime("%d.%m.%Y"), end.strftime("%d.%m.%Y"))
    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user[2]}</b> (<code>{tg_id}</code>) –Ω–∞ <b>{months}</b> –º–µ—Å.")
    try:
        await message.bot.send_message(tg_id, f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end.strftime('%d.%m.%Y')}! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É.")
    except Exception:
        pass 