from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database import get_user, add_user, update_user_email, update_user_phone, get_subscription, add_subscription, deactivate_subscriptions, add_invite_link, get_invite_link
from keyboards import main_kb, tariff_kb
from config import ADMIN_IDS, CHANNEL_ID
from datetime import datetime, timedelta

router = Router()

class Registration(StatesGroup):
    waiting_for_phone = State()
    waiting_for_email = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!\n\n"
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìã /registration ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚ÑπÔ∏è /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        "üí≥ /buy ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "üìÖ /subscription ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        "üîó /invite ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª\n\n"
        "üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /registration."
    )
    await message.answer(text, reply_markup=main_kb)

@router.message(Command("registration"))
async def cmd_registration(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.waiting_for_phone)

@router.message(Registration.waiting_for_phone)
async def reg_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Registration.waiting_for_email)

@router.message(Registration.waiting_for_email)
async def reg_email(message: Message, state: FSMContext):
    email = message.text.strip()
    data = await state.get_data()
    phone = data.get("phone")
    user = await get_user(message.from_user.id)
    if not user:
        await add_user(message.from_user.id, message.from_user.full_name, phone, email)
    else:
        await update_user_phone(message.from_user.id, phone)
        await update_user_email(message.from_user.id, email)
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìß Email: {email}\n\n"
        f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."
    )
    await state.clear()

@router.message(Command("info"))
async def cmd_info(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /registration.")
        return
    sub = await get_subscription(user[0])
    sub_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    days_left = 0
    if sub:
        sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        end = datetime.strptime(sub[3], "%d.%m.%Y")
        days_left = (end - datetime.now()).days
        if days_left < 0:
            days_left = 0
    await message.answer(
        f"<b>üóÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        f"<b>ID:</b> <code>{user[1]}</code>\n"
        f"<b>üë§ –ò–º—è:</b> {user[2]}\n"
        f"<b>üìß Email:</b> {user[4]}\n"
        f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {user[3]}\n\n"
        f"<b>üü¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{sub_status}\n"
        f"{'‚è≥ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ' + str(days_left) if sub else ''}\n\n"
        f"<b>üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/buy - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"/invite - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É\n"
        f"/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"
    )

@router.message(Command("buy"))
async def cmd_buy(message: Message):
    await message.answer(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "1 –º–µ—Å—è—Ü - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "3 –º–µ—Å—è—Ü–∞ - —Å–∫–∏–¥–∫–∞ 17%\n"
        "12 –º–µ—Å—è—Ü–µ–≤ - —Å–∫–∏–¥–∫–∞ 33%\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        reply_markup=tariff_kb
    )

@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff(callback: CallbackQuery):
    tariff = callback.data.split("_")[1]
    days = {"1": 30, "3": 90, "12": 365}[tariff]
    price = {"1": 200, "3": 500, "12": 1500}[tariff]
    user = await get_user(callback.from_user.id)
    pay_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{tariff}")]
        ]
    )
    await callback.message.answer(
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days // 30} –º–µ—Å—è—Ü(–µ–≤)</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {price}‚ÇΩ\n\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 89870812935\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: 2202208399336685\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ï–≥–æ—Ä –ò–ª—å–∏—á–µ–≤\n\n"
        f"üè¶ –°–±–µ—Ä–±–∞–Ω–∫\n\n"
        f"<b>üìù –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
        f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É: 89870812935\n"
        f"3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: <code>{user[1]}</code>\n\n"
        f"‚è≥ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞",
        reply_markup=pay_kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("paid_"))
async def paid_callback(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    tariff = callback.data.split("_")[1]
    months = {"1": 1, "3": 3, "12": 12}[tariff]
    for admin_id in ADMIN_IDS:
        try:
            await callback.bot.send_message(
                admin_id,
                f"üí∏ <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user[2]}</b>\n"
                f"üÜî ID: <code>{user[1]}</code>\n"
                f"–¢–∞—Ä–∏—Ñ: {months} –º–µ—Å.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"/activate_sub {user[1]} {months}"
            )
        except Exception:
            pass
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await callback.answer()

@router.message(Command("subscription"))
async def cmd_subscription(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /registration.")
        return
    sub = await get_subscription(user[0])
    if not sub:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    end = datetime.strptime(sub[3], "%d.%m.%Y")
    days_left = (end - datetime.now()).days
    await message.answer(
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n"
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
        f"‚Ä¢ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}\n"
        f"‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {sub[3]}\n"
        f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –û—Ç–∫–ª—é—á–µ–Ω–æ\n\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:\n‚Ä¢ {sub[2]} - {sub[3]}"
    )

@router.message(Command("invite"))
async def cmd_invite(message: Message, bot):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /registration.")
        return
    sub = await get_subscription(user[0])
    if not sub:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞
    invite_link = await get_invite_link(user[0])
    if invite_link:
        await message.answer(
            f"üîó –í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ:\n\n{invite_link}\n\n"
            f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."
        )
        return
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
    invite = await bot.create_chat_invite_link(
        chat_id=CHANNEL_ID,
        expire_date=int((datetime.now() + timedelta(days=1)).timestamp()),
        member_limit=1
    )
    await add_invite_link(user[0], invite.invite_link)
    await message.answer(
        f"üéÅ –í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n\n{invite.invite_link}\n\n"
        f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."
    )

@router.message(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_btn(message: Message):
    await cmd_info(message)

@router.message(lambda m: m.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_btn(message: Message):
    await cmd_buy(message)

@router.message(lambda m: m.text == "üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ")
async def subinfo_btn(message: Message):
    await cmd_subscription(message)

@router.message(lambda m: m.text == "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def invite_btn(message: Message, bot):
    await cmd_invite(message, bot) 